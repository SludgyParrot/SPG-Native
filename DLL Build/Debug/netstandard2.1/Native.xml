<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Native</name>
    </assembly>
    <members>
        <member name="T:Native.BaseLogBehaviour">
            <summary>
            A base class for handling logging with configurable log writers and verbosity levels.
            Implements <see cref="T:Debugger.ILogger"/> for logging functionality.
            <para>
            This class uses conditional compilation directives to ensure that logging functionality
            is only active in editor and debug modes. Specifically, the code within the
            <c>#if UNITY_EDITOR || DEBUG</c> directives will not be included in release builds.
            </para>
            </summary>
        </member>
        <member name="P:Native.BaseLogBehaviour.LogWriters">
            <summary>
            Gets or sets the list of <see cref="T:Debugger.ILogWriter"/> instances used to handle log output.
            If not set, a default <see cref="T:Debugger.UnityConsoleLogWriter"/> is used.
            </summary>
        </member>
        <member name="P:Native.BaseLogBehaviour.Context">
            <summary>
            Gets the log object context for this instance. If the context has not been initialized,
            it will be created using the <see cref="T:Debugger.UnityObjectContext"/> class.
            </summary>
            <value>
            The log object context associated with this instance.
            </value>
        </member>
        <member name="P:Native.BaseLogBehaviour.EnabledLogVerbosity">
            <summary>
            Gets the verbosity level for logging. Only logs with a verbosity level
            equal to or higher than this value will be processed.
            </summary>
        </member>
        <member name="M:Native.BaseLogBehaviour.Init(Common.IServiceCollection{Debugger.ILogWriter})">
            <summary>
            Initializes the logging system using the provided logging service collection.
            </summary>
            <param name="loggingService">The service collection containing log writers. This collection is used to populate the internal list of log writers.</param>
            <remarks>
            This method retrieves log writers from the <paramref name="loggingService"/> using <see cref="M:Native.BaseLogBehaviour.GetlogWriters(Common.IServiceCollection{Debugger.ILogWriter})"/>.
            It then clears any existing log entries by calling <see cref="M:Native.BaseLogBehaviour.ClearLogEntries"/>.
            </remarks>
        </member>
        <member name="M:Native.BaseLogBehaviour.GetlogWriters(Common.IServiceCollection{Debugger.ILogWriter})">
            <summary>
            Retrieves a list of log writers from the provided logging service collection.
            </summary>
            <param name="loggingService">The service collection that provides log writers. Must be of type <see cref="T:Debugger.Services.LoggingServices"/>.</param>
            <returns>A list of <see cref="T:Debugger.ILogWriter"/> instances obtained from the <paramref name="loggingService"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="loggingService"/> is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            Thrown if the <paramref name="loggingService"/> cannot be cast to <see cref="T:Debugger.Services.LoggingServices"/>.
            </exception>
        </member>
        <member name="M:Native.BaseLogBehaviour.Log(Debugger.LogVerbosity,System.String,System.Object[])">
            <summary>
            Logs a message using all configured log writers if the specified verbosity level is enabled.
            </summary>
            <param name="verbosity">The verbosity level of the log entry. Log writers will only log the message if the verbosity level is less than or equal to the enabled verbosity level.</param>
            <param name="message">The message format string to be logged.</param>
            <param name="args">Optional parameters for the message format string.</param>
        </member>
        <member name="M:Native.BaseLogBehaviour.LogInfo(System.String,System.Object[])">
            <summary>
            Logs an informational message with the specified arguments at the info verbosity level.
            </summary>
            <param name="message">The message to log. This can include placeholders for formatting.</param>
            <param name="args">Arguments to be inserted into the message placeholders.</param>
            <remarks>
            This method internally uses <see cref="M:Native.BaseLogBehaviour.Log(Debugger.LogVerbosity,System.String,System.Object[])"/> with <see cref="F:Debugger.LogVerbosity.Info"/> to handle the logging.
            </remarks>
        </member>
        <member name="M:Native.BaseLogBehaviour.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning message with the specified arguments at the warning verbosity level.
            </summary>
            <param name="message">The message to log. This can include placeholders for formatting.</param>
            <param name="args">Arguments to be inserted into the message placeholders.</param>
            <remarks>
            This method internally uses <see cref="M:Native.BaseLogBehaviour.Log(Debugger.LogVerbosity,System.String,System.Object[])"/> with <see cref="F:Debugger.LogVerbosity.Warning"/> to handle the logging.
            </remarks>
        </member>
        <member name="M:Native.BaseLogBehaviour.LogError(System.String,System.Object[])">
            <summary>
            Logs an error message with the specified arguments at the error verbosity level.
            </summary>
            <param name="message">The message to log. This can include placeholders for formatting.</param>
            <param name="args">Arguments to be inserted into the message placeholders.</param>
            <remarks>
            This method internally uses <see cref="M:Native.BaseLogBehaviour.Log(Debugger.LogVerbosity,System.String,System.Object[])"/> with <see cref="F:Debugger.LogVerbosity.Error"/> to handle the logging.
            </remarks>
        </member>
        <member name="M:Native.BaseLogBehaviour.ThrowException(System.Exception)">
            <summary>
            Throws the provided exception after logging it using all configured log writers.
            </summary>
            <param name="exception">The exception to be thrown and logged. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="exception"/> is null.</exception>
            <exception cref="T:System.Exception">The provided exception is re-thrown after being logged.</exception>
        </member>
        <member name="M:Native.BaseLogBehaviour.ClearLogEntries">
            <summary>
            Clears all log entries from the configured log writers.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if no log writers are found in the <see cref="F:Native.BaseLogBehaviour.logWriters"/> collection.
            </exception>
        </member>
        <member name="T:Native.IVirtualKeyboard">
            <summary>
            Represents an interface for a virtual keyboard used in Unity applications.
            </summary>
            <remarks>
            This interface is intended for use with Unity's touch keyboard functionality. 
            For more information on Unity's touch keyboard, refer to the 
            <a href="https://docs.unity3d.com/Manual/script-TouchKeyboard.html">Unity Touch Keyboard Documentation</a>.
            </remarks>
        </member>
        <member name="M:Native.IVirtualKeyboard.Show(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Displays the virtual keyboard to the user with various customization options.
            </summary>
            <param name="prompt">
            The prompt text to display to the user. If <c>null</c>, no prompt will be shown.
            </param>
            <param name="keyboardType">
            The type of keyboard to display. Defaults to <see cref="F:UnityEngine.TouchScreenKeyboardType.Default"/>.
            For more options, refer to the 
            <a href="https://docs.unity3d.com/ScriptReference/TouchScreenKeyboardType.html">TouchScreenKeyboardType Documentation</a>.
            </param>
            <param name="enableAutoCorrection">
            Whether to enable auto-correction. Defaults to <c>false</c>.
            </param>
            <param name="useMultiLines">
            Whether to allow multiple lines of input. Defaults to <c>false</c>.
            </param>
            <param name="secure">
            Whether to use secure input mode (e.g., for password input). Defaults to <c>false</c>.
            </param>
            <param name="enableAlert">
            Whether to enable an alert message. Defaults to <c>false</c>.
            </param>
            <param name="initialText">
            The initial text to display in the input field. If <c>null</c>, no initial text will be shown.
            </param>
            <param name="maxTextLength">
            The maximum length of the input text. Defaults to <c>100</c>.
            </param>
            <remarks>
            For additional details on using these parameters with Unity's touch keyboard, refer to the
            <a href="https://docs.unity3d.com/Manual/script-TouchKeyboard.html">Unity Touch Keyboard Documentation</a>.
            </remarks>
        </member>
        <member name="T:Native.Singleton`1">
            <summary>
            A generic singleton base class for MonoBehaviour types.
            <para>Provides a singleton instance of the derived class.</para>
            <para>For more information on singletons, see <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton Pattern on Wikipedia</a>.</para>
            </summary>
            <typeparam name="T">The type of the singleton instance, which must be a MonoBehaviour.</typeparam>
        </member>
        <member name="P:Native.Singleton`1.Instance">
            <summary>
            Gets the singleton instance of the specified type.
            <para>Finds the singleton instance if it does not already exist.</para>
            <para>For more information on finding objects of a type, see <a href="https://docs.unity3d.com/ScriptReference/Object.FindObjectOfType.html">FindObjectOfType in Unity Documentation</a>.</para>
            </summary>
        </member>
        <member name="P:Native.Singleton`1.DoNotDestroyOnLoad">
            <summary>
            Indicates whether the singleton instance should not be destroyed on scene load.
            <para>If set to true, the instance will persist between scenes.</para>
            <para>For more information on this behavior, see <a href="https://docs.unity3d.com/ScriptReference/Object.DontDestroyOnLoad.html">DontDestroyOnLoad in Unity Documentation</a>.</para>
            </summary>
        </member>
        <member name="M:Native.Singleton`1.Init(Common.IServiceCollection{Debugger.ILogWriter})">
            <summary>
            Initializes the singleton instance and handles persistence across scene loads if <see cref="P:Native.Singleton`1.DoNotDestroyOnLoad"/> is true.
            <para>Also ensures that only one instance of the singleton exists in the scene. If another instance is found, it will be destroyed.</para>
            </summary>
            <param name="loggingService">An instance of <see cref="T:Common.IServiceCollection`1"/> used for logging.</param>
        </member>
        <member name="T:Native.UI.OnScreenKeyboard">
            <summary>
            Implements the <see cref="T:Native.IVirtualKeyboard"/> interface to provide an on-screen keyboard functionality.
            </summary>
            <remarks>
            This class is a custom implementation for providing on-screen keyboard functionalities, which may 
            involve interactions with Unity's <see cref="T:UnityEngine.TouchScreenKeyboard"/> or other input methods.
            For details on how to handle on-screen keyboards in Unity, refer to the 
            <a href="https://docs.unity3d.com/Manual/script-TouchKeyboard.html">Unity Touch Keyboard Documentation</a>.
            </remarks>
        </member>
        <member name="M:Native.UI.OnScreenKeyboard.Show(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Displays the virtual keyboard with various customization options.
            </summary>
            <param name="prompt">
            The prompt text to display to the user. If <c>null</c>, no prompt will be shown.
            </param>
            <param name="keyboardType">
            The type of keyboard to display. Defaults to <see cref="F:UnityEngine.TouchScreenKeyboardType.Default"/>.
            For more options, refer to the 
            <a href="https://docs.unity3d.com/ScriptReference/TouchScreenKeyboardType.html">TouchScreenKeyboardType Documentation</a>.
            </param>
            <param name="enableAutoCorrection">
            Whether to enable auto-correction. Defaults to <c>false</c>.
            </param>
            <param name="useMultiLines">
            Whether to allow multiple lines of input. Defaults to <c>false</c>.
            </param>
            <param name="secure">
            Whether to use secure input mode (e.g., for password input). Defaults to <c>false</c>.
            </param>
            <param name="enableAlert">
            Whether to enable an alert message. Defaults to <c>false</c>.
            </param>
            <param name="initialText">
            The initial text to display in the input field. If <c>null</c>, no initial text will be shown.
            </param>
            <param name="maxTextLength">
            The maximum length of the input text. Defaults to <c>300</c>.
            </param>
            <remarks>
            If the virtual keyboard is already showing, this method will not create a new instance.
            </remarks>
        </member>
        <member name="T:Native.UI.TouchScreenKeyboard">
            <summary>
            Implements the <see cref="T:Native.IVirtualKeyboard"/> interface to provide a virtual keyboard using Unity's TouchScreenKeyboard.
            </summary>
            <remarks>
            This class wraps Unity's <see cref="T:UnityEngine.TouchScreenKeyboard"/> to provide an interface for displaying a virtual keyboard. 
            For more information on Unity's TouchScreenKeyboard, refer to the 
            <a href="https://docs.unity3d.com/Manual/script-TouchKeyboard.html">Unity Touch Keyboard Documentation</a>.
            </remarks>
        </member>
        <member name="M:Native.UI.TouchScreenKeyboard.Show(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Displays the virtual keyboard with various customization options.
            </summary>
            <param name="prompt">
            The prompt text to display to the user. If <c>null</c>, no prompt will be shown.
            </param>
            <param name="keyboardType">
            The type of keyboard to display. Defaults to <see cref="F:UnityEngine.TouchScreenKeyboardType.Default"/>.
            For more options, refer to the 
            <a href="https://docs.unity3d.com/ScriptReference/TouchScreenKeyboardType.html">TouchScreenKeyboardType Documentation</a>.
            </param>
            <param name="enableAutoCorrection">
            Whether to enable auto-correction. Defaults to <c>false</c>.
            </param>
            <param name="useMultiLines">
            Whether to allow multiple lines of input. Defaults to <c>false</c>.
            </param>
            <param name="secure">
            Whether to use secure input mode (e.g., for password input). Defaults to <c>false</c>.
            </param>
            <param name="enableAlert">
            Whether to enable an alert message. Defaults to <c>false</c>.
            </param>
            <param name="initialText">
            The initial text to display in the input field. If <c>null</c>, no initial text will be shown.
            </param>
            <param name="maxTextLength">
            The maximum length of the input text. Defaults to <c>300</c>.
            </param>
            <remarks>
            If the virtual keyboard is already showing, this method will not create a new instance.
            </remarks>
        </member>
        <member name="M:Native.UI.TouchScreenKeyboard.Dispose">
            <summary>
            Disposes of the virtual keyboard resources.
            </summary>
            <remarks>
            The current implementation throws <see cref="T:System.NotImplementedException"/>. You should provide a proper implementation
            to handle the disposal of resources and cleanup.
            </remarks>
        </member>
        <member name="M:Native.UI.TouchScreenKeyboard.Finalize">
            <summary>
            Finalizer for the <see cref="T:Native.UI.TouchScreenKeyboard"/> class.
            </summary>
            <remarks>
            This finalizer is not currently implemented. Consider implementing proper cleanup if needed.
            </remarks>
        </member>
    </members>
</doc>
